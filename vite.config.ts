import { defineConfig, Plugin } from 'vite';
import react from '@vitejs/plugin-react';
import { VitePWA } from 'vite-plugin-pwa';
import path from 'path';

// Custom plugin to manage Tailwind CDN for development and inject bundled CSS for production.
// FIX: Use Vite's resolved config for the project root instead of process.cwd() to fix a type error.
const tailwindManager = (): Plugin => {
  let isBuild = false;
  let root: string;
  return {
    name: 'tailwind-manager',
    // Determine if this is a build command.
    configResolved(config) {
      isBuild = config.command === 'build';
      root = config.root;
    },
    // In build mode, remove the CDN script from the HTML.
    transformIndexHtml(html) {
      if (isBuild) {
        return html.replace(/<script src="https:\/\/cdn\.tailwindcss\.com"><\/script>\n?/, '<!-- Tailwind CDN removed for build -->');
      }
      return html;
    },
    // In build mode, prepend the import for the local tailwind.css to the main entry file.
    transform(code, id) {
      const entryFile = path.resolve(root, 'index.tsx');
      if (isBuild && id === entryFile) {
        return {
          code: `import './tailwind.css';\n${code}`,
          map: null,
        };
      }
      return null;
    }
  };
};

export default defineConfig({
  base: '/',
  plugins: [
    react(),
    tailwindManager(),
    VitePWA({
      registerType: 'autoUpdate',
      // Use the existing manifest.json from the public folder
      manifest: false, 
      workbox: {
        // Precache assets generated by the build, including local fonts for better offline reliability.
        globPatterns: ['**/*.{js,css,html,ico,png,svg,json,ttf,otf}'],
        // Add runtime caching for remote fonts (e.g., Google Fonts).
        runtimeCaching: [
          {
            urlPattern: /^https:\/\/fonts\.gstatic\.com\/.*/i,
            handler: 'CacheFirst',
            options: {
              cacheName: 'google-fonts-cache',
              expiration: {
                maxEntries: 10,
                maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
              },
              cacheableResponse: {
                statuses: [0, 200]
              }
            },
          },
        ],
      },
    }),
  ],
});
